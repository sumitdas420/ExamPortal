// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ====================
// USERS & ADMIN SYSTEM
// ====================

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      AdminRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  createdQuestions Question[]
  createdExams     Exam[]
}

model Student {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  examAttempts   ExamAttempt[]
  studentAnswers StudentAnswer[]
}

// User/admin roles
enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

// ===================
// QUESTION SYSTEM
// ===================

model Question {
  id            String      @id @default(cuid())
  content       String
  questionImage String?
  questionType  QuestionType @default(MCQ_SINGLE)
  options       Json?
  optionImages  Json?
  correctAnswer Json?
  explanation   String?
  explanationImage String?
  subject       Subject
  category      String
  subcategory   String?
  difficulty    Difficulty  @default(MEDIUM)
  estimatedTime Int?
  isActive      Boolean     @default(true)
  createdById   String

  // Analytics
  timesUsed     Int         @default(0)
  correctRate   Float?
  avgTimeSpent  Float?

  createdBy        Admin @relation(fields: [createdById], references: [id], onDelete: Cascade)
  tags             QuestionTag[]
  questionBanks    QuestionBankQuestion[]
  examQuestions    ExamQuestion[]
  studentAnswers   StudentAnswer[]
  sectionQuestions SectionQuestion[]
  uploadedFiles    UploadedFile[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([subject, category])
  @@index([difficulty])
  @@index([isActive])
}

enum QuestionType {
  MCQ_SINGLE
  MCQ_MULTIPLE
  TRUE_FALSE
  NUMERICAL
  DESCRIPTIVE
  FILL_BLANKS
  MATCH_FOLLOWING
}

enum Subject {
  CAT
  JEE_MAIN
  JEE_ADVANCED
  NEET
  UPSC
  GATE
  SSC
  BANK_PO
  SNAP
  XAT
  GMAT
  GRE
  IELTS
  TOEFL
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

// ==============
// QUESTION BANKS
// ==============

model QuestionBank {
  id          String @id @default(cuid())
  name        String
  subject     Subject
  category    String
  subcategory String?
  description String?
  color       String?
  
  questions   QuestionBankQuestion[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([subject, category, subcategory])
}

model QuestionBankQuestion {
  questionId     String
  questionBankId String

  question       Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onDelete: Cascade)
  addedAt        DateTime     @default(now())
  @@id([questionId, questionBankId])
}

// ==========
// TAG SYSTEM
// ==========

model Tag {
  id          String @id @default(cuid())
  name        String @unique
  color       String?
  description String?
  questions   QuestionTag[]
  createdAt   DateTime @default(now())
}

model QuestionTag {
  questionId String
  tagId      String

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([questionId, tagId])
}

// ===============
// EXAMING SYSTEM
// ===============

model ExamTemplate {
  id            String @id @default(cuid())
  name          String
  subject       Subject
  description   String?
  totalTime     Int
  allowBackward Boolean @default(true)
  showTimer     Boolean @default(true)
  shuffleQuestions Boolean @default(false)
  shuffleOptions   Boolean @default(false)
  instructions  String?
  sections      Section[]
  exams         Exam[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Section {
  id              String @id @default(cuid())
  name            String
  description     String?
  order           Int
  timeLimit       Int?
  lockAfterTime   Int?
  mandatory       Boolean @default(true)
  totalQuestions  Int
  easyCount       Int @default(0)
  mediumCount     Int @default(0)
  hardCount       Int @default(0)
  expertCount     Int @default(0)
  instructions    String?
  examTemplate    ExamTemplate @relation(fields: [examTemplateId], references: [id], onDelete: Cascade)
  examTemplateId  String
  sectionQuestions SectionQuestion[]
  @@unique([examTemplateId, order])
}

model Exam {
  id              String @id @default(cuid())
  title           String
  description     String?
  templateId      String?
  subject         Subject
  startDate       DateTime?
  endDate         DateTime?
  duration        Int
  maxAttempts     Int     @default(1)
  isPublished     Boolean @default(false)
  isActive        Boolean @default(true)
  showResults     Boolean @default(true)
  allowReview     Boolean @default(true)
  passingMarks    Float?
  template        ExamTemplate? @relation(fields: [templateId], references: [id])
  createdBy       Admin   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById     String
  examQuestions   ExamQuestion[]
  examAttempts    ExamAttempt[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([subject])
  @@index([isPublished, isActive])
}

model ExamQuestion {
  id          String @id @default(cuid())
  examId      String
  questionId  String
  sectionName String?
  order       Int
  marks       Float   @default(1.0)
  negativeMarks Float @default(0.0)
  exam        Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id])
  @@unique([examId, order])
  @@index([examId, sectionName])
}

model SectionQuestion {
  id          String @id @default(cuid())
  sectionId   String
  questionId  String
  order       Int
  marks       Float @default(1.0)
  negativeMarks Float @default(0.0)
  section     Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id])
  @@unique([sectionId, order])
}

// =============
// STUDENT DATA
// =============

model ExamAttempt {
  id          String @id @default(cuid())
  studentId   String
  examId      String
  startTime   DateTime
  endTime     DateTime?
  timeSpent   Int?
  totalMarks      Float?
  obtainedMarks   Float?
  percentage      Float?
  rank            Int?
  status      ExamStatus @default(IN_PROGRESS)
  isCompleted Boolean    @default(false)
  student     Student @relation(fields: [studentId], references: [id])
  exam        Exam    @relation(fields: [examId], references: [id])
  answers     StudentAnswer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([studentId, examId])
}

enum ExamStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SUBMITTED
  EXPIRED
  CANCELLED
}

model StudentAnswer {
  id            String @id @default(cuid())
  studentId     String
  questionId    String
  examAttemptId String
  selectedAnswer Json?
  isCorrect     Boolean?
  marksObtained Float?
  timeSpent     Int?
  student       Student     @relation(fields: [studentId], references: [id])
  question      Question    @relation(fields: [questionId], references: [id])
  examAttempt   ExamAttempt @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)
  answeredAt    DateTime @default(now())
  @@unique([examAttemptId, questionId])
}

// ====================
// FILE UPLOADS SYSTEM
// ====================

model UploadedFile {
  id          String @id @default(cuid())
  originalName String
  fileName    String @unique
  filePath    String
  fileSize    Int
  mimeType    String
  uploadedBy  String
  questionId  String?
  createdAt   DateTime @default(now())
  question    Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  @@index([uploadedBy])
  @@index([questionId])
}

// ===================
// PHASE 3 EXTENSIONS
// ===================

// Audit logging model (for admin/student activity and system actions)
model Audit {
  id        String   @id @default(cuid())
  userId    String?
  userType  String? // "admin" or "student"
  action    String
  details   Json?
  createdAt DateTime @default(now())
}

// System/role notifications
model Notification {
  id         String   @id @default(cuid())
  title      String
  body       String
  userId     String?
  forAdmin   Boolean  @default(false)
  forStudent Boolean  @default(false)
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

// Bulk import for reporting/audit
model BulkImport {
  id        String   @id @default(cuid())
  type      String
  count     Int
  createdBy String
  status    String
  createdAt DateTime @default(now())
  details   Json
}
